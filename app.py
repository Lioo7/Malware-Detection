import os
import matplotlib.pyplot as plt
from flask import Flask, render_template, request, session
import networkx as nx
import time
import matplotlib
matplotlib.use('Agg')

if os.path.isfile("algorithms/graph_reduction.py"):
    print('The function has been successfully imported')
    from algorithms.graph_reduction import build_RG_from_DG
else:
    print("couldn't find the required file")

if os.path.isfile("algorithms/genetic_algorithm.py"):
    print('The function has been successfully imported')
    from algorithms.genetic_algorithm import GA
else:
    print("couldn't find the required file")


app = Flask(__name__)

app.secret_key = os.urandom(24)

@app.route('/')
def home_page():
    return render_template('index.html')

@app.route('/about')
def about():
    return render_template('about.html')


# Functions 
@app.route('/generate_graphs', methods=['POST'])
def generate_graphs():
    global G1, G2

    vertices_1 = int(request.form['vertices_1'])
    edges_1 = int(request.form['edges_1'])
    vertices_2 = int(request.form['vertices_2'])
    edges_2 = int(request.form['edges_2'])

    # Generate the graphs
    G1 = nx.gnm_random_graph(n=vertices_1, m=edges_1, directed=True)
    G2 = nx.gnm_random_graph(n=vertices_2, m=edges_2, directed=True)

    # Draw the graphs and save them to files
    global timestamp
    timestamp = int(time.time())
    print('timestamp_1:', timestamp)
    plt.cla()  # clear
    plt.title(f'|V|: {G1.number_of_nodes()}  |E|: {G1.number_of_edges()}')
    plt.suptitle('Graph 1')
    nx.draw(G1, with_labels=True)
    plt.savefig(f'static/img/G1_{timestamp}')
    plt.cla()  # clear
    plt.title(f'|V|: {G2.number_of_nodes()}  |E|: {G2.number_of_edges()}')
    plt.suptitle('Graph 2')
    nx.draw(G2, with_labels=True)
    plt.savefig(f'static/img/G2_{timestamp}')

    # Store the timestamp in the user's session
    session['timestamp'] = timestamp

    return render_template('index.html', timestamp=timestamp)
    
    
@app.route('/reduce_graphs', methods=['POST'])
def reduce_graphs():
    global G1_RG, G2_RG

    G1_RG = build_RG_from_DG(G1)
    G2_RG = build_RG_from_DG(G2)

    # Draw the graphs and save them to files
    plt.cla()  # clear
    plt.title(f'|V|: {G1_RG.number_of_nodes()}  |E|: {G1_RG.number_of_edges()}')
    plt.suptitle('Graph 1 - Reduced')
    nx.draw(G1_RG, with_labels=True)
    plt.savefig(f'static/img/G1_RG_{timestamp}')
    plt.cla()  # clear
    plt.title(f'|V|: {G2_RG.number_of_nodes()}  |E|: {G2_RG.number_of_edges()}')
    plt.suptitle('Graph 2 - Reduced')
    nx.draw(G2_RG, with_labels=True)
    plt.savefig(f'static/img/G2_RG_{timestamp}')

    return render_template('index.html', timestamp=timestamp)

@app.route('/result', methods=['POST'])
def genetic_algorithm():
    # pass the input of the user 
    alpha = float(request.form['alpha'])
    # run the GA algo to check if the grpahs are isomorphic
    result = GA(G1_RG, G2_RG, alpha)

    return render_template('index.html', timestamp=timestamp, result=result)


if __name__ == '__main__':
    app.run(debug = False, host = "0.0.0.0", port = 1792)